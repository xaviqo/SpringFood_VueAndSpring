{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\nconst _ = require(\"lodash\");\n\nconst path = require(\"path\");\n\nconst Chunk = require(\"webpack/lib/Chunk\");\n\nconst {\n  RawSource\n} = require(\"webpack-sources\");\n\nconst GoogleWebfonts = require(\"./GoogleWebfonts\");\n\nconst cssUrl = require(\"./cssUrl\");\n\nconst defaults = {\n  fonts: undefined,\n  name: \"fonts\",\n  apiUrl: undefined,\n  formats: undefined,\n  filename: \"fonts.css\",\n  path: \"font/\",\n  local: true\n};\n\nclass GoogleWebfontsPlugin {\n  constructor(options) {\n    this.options = Object.assign({}, defaults, options);\n    this.chunk = new Chunk(this.options.name);\n    this.chunk.ids = [];\n    this.chunk.name = this.options.name;\n  }\n\n  get api() {\n    if (!this._api) {\n      this._api = new GoogleWebfonts(this.options.apiUrl);\n    }\n\n    return this._api;\n  }\n\n  fetch() {\n    const {\n      fonts,\n      apiUrl,\n      path: fontsPath,\n      filename: cssFile,\n      formats: defaultFormats\n    } = this.options;\n\n    const compareCss = (a, b) => a.id.localeCompare(b.id);\n\n    const fontsCss = [];\n    const files = {};\n    const promises = [];\n    fonts.forEach(fontOptions => {\n      const {\n        family\n      } = fontOptions;\n      const query = this.api.getFontByFamily(family).then(font => {\n        if (!font) {\n          throw new Error(`Font family \\\"${family}\\\" not found.`);\n        }\n\n        return font.select(_.assign(fontOptions, {\n          formats: defaultFormats\n        }));\n      });\n      const cssRelativePath = path.posix.relative(path.dirname(cssFile), fontsPath);\n      promises.push(query.then(selection => {\n        return selection.css(cssRelativePath).then(css => {\n          fontsCss.push({\n            css,\n            id: selection.font.id\n          });\n        });\n      }));\n\n      if (fontsPath) {\n        promises.push(query.then(q => q.assets()).then(assets => {\n          for (const fileName in assets) {\n            files[fontsPath + fileName] = assets[fileName];\n          }\n        }));\n      }\n    });\n    return Promise.all(promises).then(() => {\n      fontsCss.sort(compareCss);\n      const css = fontsCss.map(font => font.css).join(\"\\n\");\n      return {\n        css,\n        files\n      };\n    });\n  }\n\n  apply(compiler) {\n    const {\n      fonts,\n      local,\n      filename: cssFile\n    } = this.options;\n    compiler.plugin(\"make\", (compilation, cb) => {\n      if (local) {\n        const addFile = (fileName, source) => {\n          this.chunk.files.push(fileName);\n          compilation.assets[fileName] = source;\n        };\n\n        this.fetch().then(({\n          css,\n          files\n        }) => {\n          addFile(cssFile, new RawSource(css));\n\n          for (const fileName in files) {\n            addFile(fileName, files[fileName]);\n          }\n\n          cb();\n        });\n      } else {\n        cb();\n      }\n\n      compilation.plugin(\"html-webpack-plugin-before-html-generation\", (data, cb) => {\n        if (local && (data.assets.publicPath.indexOf(\"://\") !== -1 || data.assets.publicPath.indexOf(\":\") !== -1)) {\n          data.assets.css.push(data.assets.publicPath + cssFile);\n        } else if (local) {\n          data.assets.css.push(path.posix.join(data.assets.publicPath, cssFile));\n        } else {\n          data.assets.css.push(cssUrl(fonts));\n        }\n\n        cb(null, data);\n      });\n      compilation.plugin(\"additional-assets\", cb => {\n        compilation.chunks.push(this.chunk);\n        compilation.namedChunks[this.options.name] = this.chunk;\n        cb();\n      });\n    });\n  }\n\n}\n\nGoogleWebfontsPlugin.GoogleWebfonts = GoogleWebfonts;\nGoogleWebfontsPlugin.cssUrl = cssUrl;\nmodule.exports = GoogleWebfontsPlugin;","map":{"version":3,"names":["_","require","path","Chunk","RawSource","GoogleWebfonts","cssUrl","defaults","fonts","undefined","name","apiUrl","formats","filename","local","GoogleWebfontsPlugin","constructor","options","Object","assign","chunk","ids","api","_api","fetch","fontsPath","cssFile","defaultFormats","compareCss","a","b","id","localeCompare","fontsCss","files","promises","forEach","fontOptions","family","query","getFontByFamily","then","font","Error","select","cssRelativePath","posix","relative","dirname","push","selection","css","q","assets","fileName","Promise","all","sort","map","join","apply","compiler","plugin","compilation","cb","addFile","source","data","publicPath","indexOf","chunks","namedChunks","module","exports"],"sources":["/home/xavi/Desktop/TRABAJOS/SpringFood/FE/springfood/node_modules/google-fonts-webpack-plugin/src/index.js"],"sourcesContent":["const _ = require(\"lodash\")\nconst path = require(\"path\")\nconst Chunk = require(\"webpack/lib/Chunk\")\nconst { RawSource } = require(\"webpack-sources\")\nconst GoogleWebfonts = require(\"./GoogleWebfonts\")\nconst cssUrl = require(\"./cssUrl\")\n\nconst defaults = {\n\tfonts: undefined,\n\tname: \"fonts\",\n\tapiUrl: undefined,\n\tformats: undefined,\n\tfilename: \"fonts.css\",\n\tpath: \"font/\",\n\tlocal: true\n}\n\nclass GoogleWebfontsPlugin {\n\tconstructor(options) {\n\t\tthis.options = Object.assign({}, defaults, options)\n\t\tthis.chunk = new Chunk(this.options.name)\n\t\tthis.chunk.ids = []\n\t\tthis.chunk.name = this.options.name\n\t}\n\n\tget api() {\n\t\tif(!this._api) {\n\t\t\tthis._api = new GoogleWebfonts(this.options.apiUrl)\n\t\t}\n\t\treturn this._api\n\t}\n\n\tfetch() {\n\t\tconst {\n\t\t\tfonts,\n\t\t\tapiUrl,\n\t\t\tpath: fontsPath,\n\t\t\tfilename: cssFile,\n\t\t\tformats: defaultFormats\n\t\t} = this.options\n\t\tconst compareCss = (a, b) => (a.id.localeCompare(b.id))\n\t\tconst fontsCss = []\n\t\tconst files = {}\n\t\tconst promises = []\n\t\tfonts.forEach((fontOptions) => {\n\t\t\tconst { family } = fontOptions\n\t\t\tconst query = this.api.getFontByFamily(family)\n\t\t\t\t.then(font => {\n\t\t\t\t\tif(!font) {\n\t\t\t\t\t\tthrow new Error(`Font family \\\"${family}\\\" not found.`)\n\t\t\t\t\t}\n\t\t\t\t\treturn font.select(_.assign(\n\t\t\t\t\t\tfontOptions,\n\t\t\t\t\t\t{ formats: defaultFormats }\n\t\t\t\t\t))\n\t\t\t\t})\n\t\t\tconst cssRelativePath = path.posix.relative(\n\t\t\t\tpath.dirname(cssFile),\n\t\t\t\tfontsPath\n\t\t\t)\n\t\t\tpromises.push(\n\t\t\t\tquery.then(selection => {\n\t\t\t\t\treturn selection.css(cssRelativePath).then((css) => {\n\t\t\t\t\t\tfontsCss.push({\n\t\t\t\t\t\t\tcss,\n\t\t\t\t\t\t\tid: selection.font.id\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t)\n\t\t\tif(fontsPath) {\n\t\t\t\tpromises.push(\n\t\t\t\t\tquery.then(q => q.assets())\n\t\t\t\t\t.then(assets => {\n\t\t\t\t\t\tfor(const fileName in assets) {\n\t\t\t\t\t\t\tfiles[fontsPath + fileName] = assets[fileName]\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t\treturn Promise.all(promises)\n\t\t\t.then(() => {\n\t\t\t\tfontsCss.sort(compareCss)\n\t\t\t\tconst css = fontsCss.map(font => font.css).join(\"\\n\")\n\t\t\t\treturn { css, files }\n\t\t\t})\n\t}\n\n\tapply(compiler) {\n\t\tconst { fonts, local, filename: cssFile } = this.options\n\t\tcompiler.plugin(\"make\", (compilation, cb) => {\n\t\t\tif(local) {\n\t\t\t\tconst addFile = (fileName, source) => {\n\t\t\t\t\tthis.chunk.files.push(fileName)\n\t\t\t\t\tcompilation.assets[fileName] = source\n\t\t\t\t}\n\t\t\t\tthis.fetch().then(({ css, files }) => {\n\t\t\t\t\taddFile(cssFile, new RawSource(css))\n\t\t\t\t\tfor(const fileName in files) {\n\t\t\t\t\t\taddFile(fileName, files[fileName])\n\t\t\t\t\t}\n\t\t\t\t\tcb()\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tcb()\n\t\t\t}\n\t\t\tcompilation.plugin(\"html-webpack-plugin-before-html-generation\", (data, cb) => {\n\t\t\t\tif (local && (data.assets.publicPath.indexOf(\"://\") !== -1 || data.assets.publicPath.indexOf(\":\") !== -1)) {\n                    data.assets.css.push(data.assets.publicPath + cssFile);\n                } else if (local) {\n                    data.assets.css.push(path.posix.join(data.assets.publicPath, cssFile));\n                } else {\n                    data.assets.css.push(cssUrl(fonts));\n                }\n\t\t\t\tcb(null, data)\n\t\t\t})\n\t\t\tcompilation.plugin(\"additional-assets\", cb => {\n\t\t\t\tcompilation.chunks.push(this.chunk)\n\t\t\t\tcompilation.namedChunks[this.options.name] = this.chunk\n\t\t\t\tcb()\n\t\t\t})\n\t\t})\n\t}\n}\n\nGoogleWebfontsPlugin.GoogleWebfonts = GoogleWebfonts\n\nGoogleWebfontsPlugin.cssUrl = cssUrl\n\nmodule.exports = GoogleWebfontsPlugin\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}