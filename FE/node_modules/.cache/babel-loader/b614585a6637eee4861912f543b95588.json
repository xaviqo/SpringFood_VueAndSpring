{"ast":null,"code":"// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) code = path.charCodeAt(i);else if (code === 47\n    /*/*/\n    ) break;else code = 47\n    /*/*/\n    ;\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (lastSlash === i - 1 || dots === 1) {// NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46\n        /*.*/\n        || res.charCodeAt(res.length - 2) !== 46\n        /*.*/\n        ) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          if (res.length > 0) res += '/..';else res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46\n    /*.*/\n    && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n\n  if (!dir) {\n    return base;\n  }\n\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0) path = arguments[i];else {\n        if (cwd === undefined) cwd = process.cwd();\n        path = cwd;\n      }\n      assertPath(path); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47\n      /*/*/\n      ;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n  normalize: function normalize(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var isAbsolute = path.charCodeAt(0) === 47\n    /*/*/\n    ;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47\n    /*/*/\n    ; // Normalize the path\n\n    path = normalizeStringPosix(path, !isAbsolute);\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47\n    /*/*/\n    ;\n  },\n  join: function join() {\n    if (arguments.length === 0) return '.';\n    var joined;\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n\n      if (arg.length > 0) {\n        if (joined === undefined) joined = arg;else joined += '/' + arg;\n      }\n    }\n\n    if (joined === undefined) return '.';\n    return posix.normalize(joined);\n  },\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n    if (from === to) return '';\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) return ''; // Trim any leading backslashes\n\n    var fromStart = 1;\n\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    var toStart = 1;\n\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var toEnd = to.length;\n    var toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n\n        break;\n      }\n\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode) break;else if (fromCode === 47\n      /*/*/\n      ) lastCommonSep = i;\n    }\n\n    var out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47\n      /*/*/\n      ) {\n        if (out.length === 0) out += '..';else out += '/..';\n      }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47\n      /*/*/\n      ) ++toStart;\n      return to.slice(toStart);\n    }\n  },\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47\n    /*/*/\n    ;\n    var end = -1;\n    var matchedSlash = true;\n\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n\n        if (code === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0;\n\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n\n    return _format('/', pathObject);\n  },\n  parse: function parse(path) {\n    assertPath(path);\n    var ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47\n    /*/*/\n    ;\n    var start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.posix = posix;\nmodule.exports = posix;","map":{"version":3,"names":["assertPath","path","TypeError","JSON","stringify","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","_format","sep","pathObject","dir","root","base","name","ext","posix","resolve","resolvedPath","resolvedAbsolute","cwd","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","toCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","parse","ret","delimiter","win32","module","exports"],"sources":["/home/xavi/Desktop/TRABAJOS/SpringFood/FE/springfood/node_modules/path-browserify/index.js"],"sourcesContent":["// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAEA,SAASA,UAAT,CAAoBC,IAApB,EAA0B;EACxB,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAM,IAAIC,SAAJ,CAAc,qCAAqCC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAnD,CAAN;EACD;AACF,C,CAED;;;AACA,SAASI,oBAAT,CAA8BJ,IAA9B,EAAoCK,cAApC,EAAoD;EAClD,IAAIC,GAAG,GAAG,EAAV;EACA,IAAIC,iBAAiB,GAAG,CAAxB;EACA,IAAIC,SAAS,GAAG,CAAC,CAAjB;EACA,IAAIC,IAAI,GAAG,CAAX;EACA,IAAIC,IAAJ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIX,IAAI,CAACY,MAA1B,EAAkC,EAAED,CAApC,EAAuC;IACrC,IAAIA,CAAC,GAAGX,IAAI,CAACY,MAAb,EACEF,IAAI,GAAGV,IAAI,CAACa,UAAL,CAAgBF,CAAhB,CAAP,CADF,KAEK,IAAID,IAAI,KAAK;IAAG;IAAhB,EACH,MADG,KAGHA,IAAI,GAAG;IAAG;IAAV;;IACF,IAAIA,IAAI,KAAK;IAAG;IAAhB,EAAuB;MACrB,IAAIF,SAAS,KAAKG,CAAC,GAAG,CAAlB,IAAuBF,IAAI,KAAK,CAApC,EAAuC,CACrC;MACD,CAFD,MAEO,IAAID,SAAS,KAAKG,CAAC,GAAG,CAAlB,IAAuBF,IAAI,KAAK,CAApC,EAAuC;QAC5C,IAAIH,GAAG,CAACM,MAAJ,GAAa,CAAb,IAAkBL,iBAAiB,KAAK,CAAxC,IAA6CD,GAAG,CAACO,UAAJ,CAAeP,GAAG,CAACM,MAAJ,GAAa,CAA5B,MAAmC;QAAG;QAAnF,GAA4FN,GAAG,CAACO,UAAJ,CAAeP,GAAG,CAACM,MAAJ,GAAa,CAA5B,MAAmC;QAAG;QAAtI,EAA6I;UAC3I,IAAIN,GAAG,CAACM,MAAJ,GAAa,CAAjB,EAAoB;YAClB,IAAIE,cAAc,GAAGR,GAAG,CAACS,WAAJ,CAAgB,GAAhB,CAArB;;YACA,IAAID,cAAc,KAAKR,GAAG,CAACM,MAAJ,GAAa,CAApC,EAAuC;cACrC,IAAIE,cAAc,KAAK,CAAC,CAAxB,EAA2B;gBACzBR,GAAG,GAAG,EAAN;gBACAC,iBAAiB,GAAG,CAApB;cACD,CAHD,MAGO;gBACLD,GAAG,GAAGA,GAAG,CAACU,KAAJ,CAAU,CAAV,EAAaF,cAAb,CAAN;gBACAP,iBAAiB,GAAGD,GAAG,CAACM,MAAJ,GAAa,CAAb,GAAiBN,GAAG,CAACS,WAAJ,CAAgB,GAAhB,CAArC;cACD;;cACDP,SAAS,GAAGG,CAAZ;cACAF,IAAI,GAAG,CAAP;cACA;YACD;UACF,CAdD,MAcO,IAAIH,GAAG,CAACM,MAAJ,KAAe,CAAf,IAAoBN,GAAG,CAACM,MAAJ,KAAe,CAAvC,EAA0C;YAC/CN,GAAG,GAAG,EAAN;YACAC,iBAAiB,GAAG,CAApB;YACAC,SAAS,GAAGG,CAAZ;YACAF,IAAI,GAAG,CAAP;YACA;UACD;QACF;;QACD,IAAIJ,cAAJ,EAAoB;UAClB,IAAIC,GAAG,CAACM,MAAJ,GAAa,CAAjB,EACEN,GAAG,IAAI,KAAP,CADF,KAGEA,GAAG,GAAG,IAAN;UACFC,iBAAiB,GAAG,CAApB;QACD;MACF,CA/BM,MA+BA;QACL,IAAID,GAAG,CAACM,MAAJ,GAAa,CAAjB,EACEN,GAAG,IAAI,MAAMN,IAAI,CAACgB,KAAL,CAAWR,SAAS,GAAG,CAAvB,EAA0BG,CAA1B,CAAb,CADF,KAGEL,GAAG,GAAGN,IAAI,CAACgB,KAAL,CAAWR,SAAS,GAAG,CAAvB,EAA0BG,CAA1B,CAAN;QACFJ,iBAAiB,GAAGI,CAAC,GAAGH,SAAJ,GAAgB,CAApC;MACD;;MACDA,SAAS,GAAGG,CAAZ;MACAF,IAAI,GAAG,CAAP;IACD,CA3CD,MA2CO,IAAIC,IAAI,KAAK;IAAG;IAAZ,GAAqBD,IAAI,KAAK,CAAC,CAAnC,EAAsC;MAC3C,EAAEA,IAAF;IACD,CAFM,MAEA;MACLA,IAAI,GAAG,CAAC,CAAR;IACD;EACF;;EACD,OAAOH,GAAP;AACD;;AAED,SAASW,OAAT,CAAiBC,GAAjB,EAAsBC,UAAtB,EAAkC;EAChC,IAAIC,GAAG,GAAGD,UAAU,CAACC,GAAX,IAAkBD,UAAU,CAACE,IAAvC;EACA,IAAIC,IAAI,GAAGH,UAAU,CAACG,IAAX,IAAmB,CAACH,UAAU,CAACI,IAAX,IAAmB,EAApB,KAA2BJ,UAAU,CAACK,GAAX,IAAkB,EAA7C,CAA9B;;EACA,IAAI,CAACJ,GAAL,EAAU;IACR,OAAOE,IAAP;EACD;;EACD,IAAIF,GAAG,KAAKD,UAAU,CAACE,IAAvB,EAA6B;IAC3B,OAAOD,GAAG,GAAGE,IAAb;EACD;;EACD,OAAOF,GAAG,GAAGF,GAAN,GAAYI,IAAnB;AACD;;AAED,IAAIG,KAAK,GAAG;EACV;EACAC,OAAO,EAAE,SAASA,OAAT,GAAmB;IAC1B,IAAIC,YAAY,GAAG,EAAnB;IACA,IAAIC,gBAAgB,GAAG,KAAvB;IACA,IAAIC,GAAJ;;IAEA,KAAK,IAAIlB,CAAC,GAAGmB,SAAS,CAAClB,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,IAAI,CAAC,CAAN,IAAW,CAACiB,gBAA/C,EAAiEjB,CAAC,EAAlE,EAAsE;MACpE,IAAIX,IAAJ;MACA,IAAIW,CAAC,IAAI,CAAT,EACEX,IAAI,GAAG8B,SAAS,CAACnB,CAAD,CAAhB,CADF,KAEK;QACH,IAAIkB,GAAG,KAAKE,SAAZ,EACEF,GAAG,GAAGG,OAAO,CAACH,GAAR,EAAN;QACF7B,IAAI,GAAG6B,GAAP;MACD;MAED9B,UAAU,CAACC,IAAD,CAAV,CAVoE,CAYpE;;MACA,IAAIA,IAAI,CAACY,MAAL,KAAgB,CAApB,EAAuB;QACrB;MACD;;MAEDe,YAAY,GAAG3B,IAAI,GAAG,GAAP,GAAa2B,YAA5B;MACAC,gBAAgB,GAAG5B,IAAI,CAACa,UAAL,CAAgB,CAAhB,MAAuB;MAAG;MAA7C;IACD,CAxByB,CA0B1B;IACA;IAEA;;;IACAc,YAAY,GAAGvB,oBAAoB,CAACuB,YAAD,EAAe,CAACC,gBAAhB,CAAnC;;IAEA,IAAIA,gBAAJ,EAAsB;MACpB,IAAID,YAAY,CAACf,MAAb,GAAsB,CAA1B,EACE,OAAO,MAAMe,YAAb,CADF,KAGE,OAAO,GAAP;IACH,CALD,MAKO,IAAIA,YAAY,CAACf,MAAb,GAAsB,CAA1B,EAA6B;MAClC,OAAOe,YAAP;IACD,CAFM,MAEA;MACL,OAAO,GAAP;IACD;EACF,CA5CS;EA8CVM,SAAS,EAAE,SAASA,SAAT,CAAmBjC,IAAnB,EAAyB;IAClCD,UAAU,CAACC,IAAD,CAAV;IAEA,IAAIA,IAAI,CAACY,MAAL,KAAgB,CAApB,EAAuB,OAAO,GAAP;IAEvB,IAAIsB,UAAU,GAAGlC,IAAI,CAACa,UAAL,CAAgB,CAAhB,MAAuB;IAAG;IAA3C;IACA,IAAIsB,iBAAiB,GAAGnC,IAAI,CAACa,UAAL,CAAgBb,IAAI,CAACY,MAAL,GAAc,CAA9B,MAAqC;IAAG;IAAhE,CANkC,CAQlC;;IACAZ,IAAI,GAAGI,oBAAoB,CAACJ,IAAD,EAAO,CAACkC,UAAR,CAA3B;IAEA,IAAIlC,IAAI,CAACY,MAAL,KAAgB,CAAhB,IAAqB,CAACsB,UAA1B,EAAsClC,IAAI,GAAG,GAAP;IACtC,IAAIA,IAAI,CAACY,MAAL,GAAc,CAAd,IAAmBuB,iBAAvB,EAA0CnC,IAAI,IAAI,GAAR;IAE1C,IAAIkC,UAAJ,EAAgB,OAAO,MAAMlC,IAAb;IAChB,OAAOA,IAAP;EACD,CA9DS;EAgEVkC,UAAU,EAAE,SAASA,UAAT,CAAoBlC,IAApB,EAA0B;IACpCD,UAAU,CAACC,IAAD,CAAV;IACA,OAAOA,IAAI,CAACY,MAAL,GAAc,CAAd,IAAmBZ,IAAI,CAACa,UAAL,CAAgB,CAAhB,MAAuB;IAAG;IAApD;EACD,CAnES;EAqEVuB,IAAI,EAAE,SAASA,IAAT,GAAgB;IACpB,IAAIN,SAAS,CAAClB,MAAV,KAAqB,CAAzB,EACE,OAAO,GAAP;IACF,IAAIyB,MAAJ;;IACA,KAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,SAAS,CAAClB,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;MACzC,IAAI2B,GAAG,GAAGR,SAAS,CAACnB,CAAD,CAAnB;MACAZ,UAAU,CAACuC,GAAD,CAAV;;MACA,IAAIA,GAAG,CAAC1B,MAAJ,GAAa,CAAjB,EAAoB;QAClB,IAAIyB,MAAM,KAAKN,SAAf,EACEM,MAAM,GAAGC,GAAT,CADF,KAGED,MAAM,IAAI,MAAMC,GAAhB;MACH;IACF;;IACD,IAAID,MAAM,KAAKN,SAAf,EACE,OAAO,GAAP;IACF,OAAON,KAAK,CAACQ,SAAN,CAAgBI,MAAhB,CAAP;EACD,CAtFS;EAwFVE,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,EAAxB,EAA4B;IACpC1C,UAAU,CAACyC,IAAD,CAAV;IACAzC,UAAU,CAAC0C,EAAD,CAAV;IAEA,IAAID,IAAI,KAAKC,EAAb,EAAiB,OAAO,EAAP;IAEjBD,IAAI,GAAGf,KAAK,CAACC,OAAN,CAAcc,IAAd,CAAP;IACAC,EAAE,GAAGhB,KAAK,CAACC,OAAN,CAAce,EAAd,CAAL;IAEA,IAAID,IAAI,KAAKC,EAAb,EAAiB,OAAO,EAAP,CATmB,CAWpC;;IACA,IAAIC,SAAS,GAAG,CAAhB;;IACA,OAAOA,SAAS,GAAGF,IAAI,CAAC5B,MAAxB,EAAgC,EAAE8B,SAAlC,EAA6C;MAC3C,IAAIF,IAAI,CAAC3B,UAAL,CAAgB6B,SAAhB,MAA+B;MAAG;MAAtC,EACE;IACH;;IACD,IAAIC,OAAO,GAAGH,IAAI,CAAC5B,MAAnB;IACA,IAAIgC,OAAO,GAAGD,OAAO,GAAGD,SAAxB,CAlBoC,CAoBpC;;IACA,IAAIG,OAAO,GAAG,CAAd;;IACA,OAAOA,OAAO,GAAGJ,EAAE,CAAC7B,MAApB,EAA4B,EAAEiC,OAA9B,EAAuC;MACrC,IAAIJ,EAAE,CAAC5B,UAAH,CAAcgC,OAAd,MAA2B;MAAG;MAAlC,EACE;IACH;;IACD,IAAIC,KAAK,GAAGL,EAAE,CAAC7B,MAAf;IACA,IAAImC,KAAK,GAAGD,KAAK,GAAGD,OAApB,CA3BoC,CA6BpC;;IACA,IAAIjC,MAAM,GAAGgC,OAAO,GAAGG,KAAV,GAAkBH,OAAlB,GAA4BG,KAAzC;IACA,IAAIC,aAAa,GAAG,CAAC,CAArB;IACA,IAAIrC,CAAC,GAAG,CAAR;;IACA,OAAOA,CAAC,IAAIC,MAAZ,EAAoB,EAAED,CAAtB,EAAyB;MACvB,IAAIA,CAAC,KAAKC,MAAV,EAAkB;QAChB,IAAImC,KAAK,GAAGnC,MAAZ,EAAoB;UAClB,IAAI6B,EAAE,CAAC5B,UAAH,CAAcgC,OAAO,GAAGlC,CAAxB,MAA+B;UAAG;UAAtC,EAA6C;YAC3C;YACA;YACA,OAAO8B,EAAE,CAACzB,KAAH,CAAS6B,OAAO,GAAGlC,CAAV,GAAc,CAAvB,CAAP;UACD,CAJD,MAIO,IAAIA,CAAC,KAAK,CAAV,EAAa;YAClB;YACA;YACA,OAAO8B,EAAE,CAACzB,KAAH,CAAS6B,OAAO,GAAGlC,CAAnB,CAAP;UACD;QACF,CAVD,MAUO,IAAIiC,OAAO,GAAGhC,MAAd,EAAsB;UAC3B,IAAI4B,IAAI,CAAC3B,UAAL,CAAgB6B,SAAS,GAAG/B,CAA5B,MAAmC;UAAG;UAA1C,EAAiD;YAC/C;YACA;YACAqC,aAAa,GAAGrC,CAAhB;UACD,CAJD,MAIO,IAAIA,CAAC,KAAK,CAAV,EAAa;YAClB;YACA;YACAqC,aAAa,GAAG,CAAhB;UACD;QACF;;QACD;MACD;;MACD,IAAIC,QAAQ,GAAGT,IAAI,CAAC3B,UAAL,CAAgB6B,SAAS,GAAG/B,CAA5B,CAAf;MACA,IAAIuC,MAAM,GAAGT,EAAE,CAAC5B,UAAH,CAAcgC,OAAO,GAAGlC,CAAxB,CAAb;MACA,IAAIsC,QAAQ,KAAKC,MAAjB,EACE,MADF,KAEK,IAAID,QAAQ,KAAK;MAAG;MAApB,EACHD,aAAa,GAAGrC,CAAhB;IACH;;IAED,IAAIwC,GAAG,GAAG,EAAV,CAlEoC,CAmEpC;IACA;;IACA,KAAKxC,CAAC,GAAG+B,SAAS,GAAGM,aAAZ,GAA4B,CAArC,EAAwCrC,CAAC,IAAIgC,OAA7C,EAAsD,EAAEhC,CAAxD,EAA2D;MACzD,IAAIA,CAAC,KAAKgC,OAAN,IAAiBH,IAAI,CAAC3B,UAAL,CAAgBF,CAAhB,MAAuB;MAAG;MAA/C,EAAsD;QACpD,IAAIwC,GAAG,CAACvC,MAAJ,KAAe,CAAnB,EACEuC,GAAG,IAAI,IAAP,CADF,KAGEA,GAAG,IAAI,KAAP;MACH;IACF,CA5EmC,CA8EpC;IACA;;;IACA,IAAIA,GAAG,CAACvC,MAAJ,GAAa,CAAjB,EACE,OAAOuC,GAAG,GAAGV,EAAE,CAACzB,KAAH,CAAS6B,OAAO,GAAGG,aAAnB,CAAb,CADF,KAEK;MACHH,OAAO,IAAIG,aAAX;MACA,IAAIP,EAAE,CAAC5B,UAAH,CAAcgC,OAAd,MAA2B;MAAG;MAAlC,EACE,EAAEA,OAAF;MACF,OAAOJ,EAAE,CAACzB,KAAH,CAAS6B,OAAT,CAAP;IACD;EACF,CAhLS;EAkLVO,SAAS,EAAE,SAASA,SAAT,CAAmBpD,IAAnB,EAAyB;IAClC,OAAOA,IAAP;EACD,CApLS;EAsLVqD,OAAO,EAAE,SAASA,OAAT,CAAiBrD,IAAjB,EAAuB;IAC9BD,UAAU,CAACC,IAAD,CAAV;IACA,IAAIA,IAAI,CAACY,MAAL,KAAgB,CAApB,EAAuB,OAAO,GAAP;IACvB,IAAIF,IAAI,GAAGV,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAAX;IACA,IAAIyC,OAAO,GAAG5C,IAAI,KAAK;IAAG;IAA1B;IACA,IAAI6C,GAAG,GAAG,CAAC,CAAX;IACA,IAAIC,YAAY,GAAG,IAAnB;;IACA,KAAK,IAAI7C,CAAC,GAAGX,IAAI,CAACY,MAAL,GAAc,CAA3B,EAA8BD,CAAC,IAAI,CAAnC,EAAsC,EAAEA,CAAxC,EAA2C;MACzCD,IAAI,GAAGV,IAAI,CAACa,UAAL,CAAgBF,CAAhB,CAAP;;MACA,IAAID,IAAI,KAAK;MAAG;MAAhB,EAAuB;QACnB,IAAI,CAAC8C,YAAL,EAAmB;UACjBD,GAAG,GAAG5C,CAAN;UACA;QACD;MACF,CALH,MAKS;QACP;QACA6C,YAAY,GAAG,KAAf;MACD;IACF;;IAED,IAAID,GAAG,KAAK,CAAC,CAAb,EAAgB,OAAOD,OAAO,GAAG,GAAH,GAAS,GAAvB;IAChB,IAAIA,OAAO,IAAIC,GAAG,KAAK,CAAvB,EAA0B,OAAO,IAAP;IAC1B,OAAOvD,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcuC,GAAd,CAAP;EACD,CA7MS;EA+MVE,QAAQ,EAAE,SAASA,QAAT,CAAkBzD,IAAlB,EAAwBwB,GAAxB,EAA6B;IACrC,IAAIA,GAAG,KAAKO,SAAR,IAAqB,OAAOP,GAAP,KAAe,QAAxC,EAAkD,MAAM,IAAIvB,SAAJ,CAAc,iCAAd,CAAN;IAClDF,UAAU,CAACC,IAAD,CAAV;IAEA,IAAI0D,KAAK,GAAG,CAAZ;IACA,IAAIH,GAAG,GAAG,CAAC,CAAX;IACA,IAAIC,YAAY,GAAG,IAAnB;IACA,IAAI7C,CAAJ;;IAEA,IAAIa,GAAG,KAAKO,SAAR,IAAqBP,GAAG,CAACZ,MAAJ,GAAa,CAAlC,IAAuCY,GAAG,CAACZ,MAAJ,IAAcZ,IAAI,CAACY,MAA9D,EAAsE;MACpE,IAAIY,GAAG,CAACZ,MAAJ,KAAeZ,IAAI,CAACY,MAApB,IAA8BY,GAAG,KAAKxB,IAA1C,EAAgD,OAAO,EAAP;MAChD,IAAI2D,MAAM,GAAGnC,GAAG,CAACZ,MAAJ,GAAa,CAA1B;MACA,IAAIgD,gBAAgB,GAAG,CAAC,CAAxB;;MACA,KAAKjD,CAAC,GAAGX,IAAI,CAACY,MAAL,GAAc,CAAvB,EAA0BD,CAAC,IAAI,CAA/B,EAAkC,EAAEA,CAApC,EAAuC;QACrC,IAAID,IAAI,GAAGV,IAAI,CAACa,UAAL,CAAgBF,CAAhB,CAAX;;QACA,IAAID,IAAI,KAAK;QAAG;QAAhB,EAAuB;UACnB;UACA;UACA,IAAI,CAAC8C,YAAL,EAAmB;YACjBE,KAAK,GAAG/C,CAAC,GAAG,CAAZ;YACA;UACD;QACF,CAPH,MAOS;UACP,IAAIiD,gBAAgB,KAAK,CAAC,CAA1B,EAA6B;YAC3B;YACA;YACAJ,YAAY,GAAG,KAAf;YACAI,gBAAgB,GAAGjD,CAAC,GAAG,CAAvB;UACD;;UACD,IAAIgD,MAAM,IAAI,CAAd,EAAiB;YACf;YACA,IAAIjD,IAAI,KAAKc,GAAG,CAACX,UAAJ,CAAe8C,MAAf,CAAb,EAAqC;cACnC,IAAI,EAAEA,MAAF,KAAa,CAAC,CAAlB,EAAqB;gBACnB;gBACA;gBACAJ,GAAG,GAAG5C,CAAN;cACD;YACF,CAND,MAMO;cACL;cACA;cACAgD,MAAM,GAAG,CAAC,CAAV;cACAJ,GAAG,GAAGK,gBAAN;YACD;UACF;QACF;MACF;;MAED,IAAIF,KAAK,KAAKH,GAAd,EAAmBA,GAAG,GAAGK,gBAAN,CAAnB,KAA+C,IAAIL,GAAG,KAAK,CAAC,CAAb,EAAgBA,GAAG,GAAGvD,IAAI,CAACY,MAAX;MAC/D,OAAOZ,IAAI,CAACgB,KAAL,CAAW0C,KAAX,EAAkBH,GAAlB,CAAP;IACD,CAxCD,MAwCO;MACL,KAAK5C,CAAC,GAAGX,IAAI,CAACY,MAAL,GAAc,CAAvB,EAA0BD,CAAC,IAAI,CAA/B,EAAkC,EAAEA,CAApC,EAAuC;QACrC,IAAIX,IAAI,CAACa,UAAL,CAAgBF,CAAhB,MAAuB;QAAG;QAA9B,EAAqC;UACjC;UACA;UACA,IAAI,CAAC6C,YAAL,EAAmB;YACjBE,KAAK,GAAG/C,CAAC,GAAG,CAAZ;YACA;UACD;QACF,CAPH,MAOS,IAAI4C,GAAG,KAAK,CAAC,CAAb,EAAgB;UACvB;UACA;UACAC,YAAY,GAAG,KAAf;UACAD,GAAG,GAAG5C,CAAC,GAAG,CAAV;QACD;MACF;;MAED,IAAI4C,GAAG,KAAK,CAAC,CAAb,EAAgB,OAAO,EAAP;MAChB,OAAOvD,IAAI,CAACgB,KAAL,CAAW0C,KAAX,EAAkBH,GAAlB,CAAP;IACD;EACF,CApRS;EAsRVM,OAAO,EAAE,SAASA,OAAT,CAAiB7D,IAAjB,EAAuB;IAC9BD,UAAU,CAACC,IAAD,CAAV;IACA,IAAI8D,QAAQ,GAAG,CAAC,CAAhB;IACA,IAAIC,SAAS,GAAG,CAAhB;IACA,IAAIR,GAAG,GAAG,CAAC,CAAX;IACA,IAAIC,YAAY,GAAG,IAAnB,CAL8B,CAM9B;IACA;;IACA,IAAIQ,WAAW,GAAG,CAAlB;;IACA,KAAK,IAAIrD,CAAC,GAAGX,IAAI,CAACY,MAAL,GAAc,CAA3B,EAA8BD,CAAC,IAAI,CAAnC,EAAsC,EAAEA,CAAxC,EAA2C;MACzC,IAAID,IAAI,GAAGV,IAAI,CAACa,UAAL,CAAgBF,CAAhB,CAAX;;MACA,IAAID,IAAI,KAAK;MAAG;MAAhB,EAAuB;QACnB;QACA;QACA,IAAI,CAAC8C,YAAL,EAAmB;UACjBO,SAAS,GAAGpD,CAAC,GAAG,CAAhB;UACA;QACD;;QACD;MACD;;MACH,IAAI4C,GAAG,KAAK,CAAC,CAAb,EAAgB;QACd;QACA;QACAC,YAAY,GAAG,KAAf;QACAD,GAAG,GAAG5C,CAAC,GAAG,CAAV;MACD;;MACD,IAAID,IAAI,KAAK;MAAG;MAAhB,EAAuB;QACnB;QACA,IAAIoD,QAAQ,KAAK,CAAC,CAAlB,EACEA,QAAQ,GAAGnD,CAAX,CADF,KAEK,IAAIqD,WAAW,KAAK,CAApB,EACHA,WAAW,GAAG,CAAd;MACL,CAND,MAMO,IAAIF,QAAQ,KAAK,CAAC,CAAlB,EAAqB;QAC1B;QACA;QACAE,WAAW,GAAG,CAAC,CAAf;MACD;IACF;;IAED,IAAIF,QAAQ,KAAK,CAAC,CAAd,IAAmBP,GAAG,KAAK,CAAC,CAA5B,IACA;IACAS,WAAW,KAAK,CAFhB,IAGA;IACAA,WAAW,KAAK,CAAhB,IAAqBF,QAAQ,KAAKP,GAAG,GAAG,CAAxC,IAA6CO,QAAQ,KAAKC,SAAS,GAAG,CAJ1E,EAI6E;MAC3E,OAAO,EAAP;IACD;;IACD,OAAO/D,IAAI,CAACgB,KAAL,CAAW8C,QAAX,EAAqBP,GAArB,CAAP;EACD,CArUS;EAuUVU,MAAM,EAAE,SAASA,MAAT,CAAgB9C,UAAhB,EAA4B;IAClC,IAAIA,UAAU,KAAK,IAAf,IAAuB,OAAOA,UAAP,KAAsB,QAAjD,EAA2D;MACzD,MAAM,IAAIlB,SAAJ,CAAc,qEAAqE,OAAOkB,UAA1F,CAAN;IACD;;IACD,OAAOF,OAAO,CAAC,GAAD,EAAME,UAAN,CAAd;EACD,CA5US;EA8UV+C,KAAK,EAAE,SAASA,KAAT,CAAelE,IAAf,EAAqB;IAC1BD,UAAU,CAACC,IAAD,CAAV;IAEA,IAAImE,GAAG,GAAG;MAAE9C,IAAI,EAAE,EAAR;MAAYD,GAAG,EAAE,EAAjB;MAAqBE,IAAI,EAAE,EAA3B;MAA+BE,GAAG,EAAE,EAApC;MAAwCD,IAAI,EAAE;IAA9C,CAAV;IACA,IAAIvB,IAAI,CAACY,MAAL,KAAgB,CAApB,EAAuB,OAAOuD,GAAP;IACvB,IAAIzD,IAAI,GAAGV,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAAX;IACA,IAAIqB,UAAU,GAAGxB,IAAI,KAAK;IAAG;IAA7B;IACA,IAAIgD,KAAJ;;IACA,IAAIxB,UAAJ,EAAgB;MACdiC,GAAG,CAAC9C,IAAJ,GAAW,GAAX;MACAqC,KAAK,GAAG,CAAR;IACD,CAHD,MAGO;MACLA,KAAK,GAAG,CAAR;IACD;;IACD,IAAII,QAAQ,GAAG,CAAC,CAAhB;IACA,IAAIC,SAAS,GAAG,CAAhB;IACA,IAAIR,GAAG,GAAG,CAAC,CAAX;IACA,IAAIC,YAAY,GAAG,IAAnB;IACA,IAAI7C,CAAC,GAAGX,IAAI,CAACY,MAAL,GAAc,CAAtB,CAlB0B,CAoB1B;IACA;;IACA,IAAIoD,WAAW,GAAG,CAAlB,CAtB0B,CAwB1B;;IACA,OAAOrD,CAAC,IAAI+C,KAAZ,EAAmB,EAAE/C,CAArB,EAAwB;MACtBD,IAAI,GAAGV,IAAI,CAACa,UAAL,CAAgBF,CAAhB,CAAP;;MACA,IAAID,IAAI,KAAK;MAAG;MAAhB,EAAuB;QACnB;QACA;QACA,IAAI,CAAC8C,YAAL,EAAmB;UACjBO,SAAS,GAAGpD,CAAC,GAAG,CAAhB;UACA;QACD;;QACD;MACD;;MACH,IAAI4C,GAAG,KAAK,CAAC,CAAb,EAAgB;QACd;QACA;QACAC,YAAY,GAAG,KAAf;QACAD,GAAG,GAAG5C,CAAC,GAAG,CAAV;MACD;;MACD,IAAID,IAAI,KAAK;MAAG;MAAhB,EAAuB;QACnB;QACA,IAAIoD,QAAQ,KAAK,CAAC,CAAlB,EAAqBA,QAAQ,GAAGnD,CAAX,CAArB,KAAuC,IAAIqD,WAAW,KAAK,CAApB,EAAuBA,WAAW,GAAG,CAAd;MAC/D,CAHH,MAGS,IAAIF,QAAQ,KAAK,CAAC,CAAlB,EAAqB;QAC5B;QACA;QACAE,WAAW,GAAG,CAAC,CAAf;MACD;IACF;;IAED,IAAIF,QAAQ,KAAK,CAAC,CAAd,IAAmBP,GAAG,KAAK,CAAC,CAA5B,IACJ;IACAS,WAAW,KAAK,CAFZ,IAGJ;IACAA,WAAW,KAAK,CAAhB,IAAqBF,QAAQ,KAAKP,GAAG,GAAG,CAAxC,IAA6CO,QAAQ,KAAKC,SAAS,GAAG,CAJtE,EAIyE;MACvE,IAAIR,GAAG,KAAK,CAAC,CAAb,EAAgB;QACd,IAAIQ,SAAS,KAAK,CAAd,IAAmB7B,UAAvB,EAAmCiC,GAAG,CAAC7C,IAAJ,GAAW6C,GAAG,CAAC5C,IAAJ,GAAWvB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcuC,GAAd,CAAtB,CAAnC,KAAiFY,GAAG,CAAC7C,IAAJ,GAAW6C,GAAG,CAAC5C,IAAJ,GAAWvB,IAAI,CAACgB,KAAL,CAAW+C,SAAX,EAAsBR,GAAtB,CAAtB;MAClF;IACF,CARD,MAQO;MACL,IAAIQ,SAAS,KAAK,CAAd,IAAmB7B,UAAvB,EAAmC;QACjCiC,GAAG,CAAC5C,IAAJ,GAAWvB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAc8C,QAAd,CAAX;QACAK,GAAG,CAAC7C,IAAJ,GAAWtB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcuC,GAAd,CAAX;MACD,CAHD,MAGO;QACLY,GAAG,CAAC5C,IAAJ,GAAWvB,IAAI,CAACgB,KAAL,CAAW+C,SAAX,EAAsBD,QAAtB,CAAX;QACAK,GAAG,CAAC7C,IAAJ,GAAWtB,IAAI,CAACgB,KAAL,CAAW+C,SAAX,EAAsBR,GAAtB,CAAX;MACD;;MACDY,GAAG,CAAC3C,GAAJ,GAAUxB,IAAI,CAACgB,KAAL,CAAW8C,QAAX,EAAqBP,GAArB,CAAV;IACD;;IAED,IAAIQ,SAAS,GAAG,CAAhB,EAAmBI,GAAG,CAAC/C,GAAJ,GAAUpB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAc+C,SAAS,GAAG,CAA1B,CAAV,CAAnB,KAA+D,IAAI7B,UAAJ,EAAgBiC,GAAG,CAAC/C,GAAJ,GAAU,GAAV;IAE/E,OAAO+C,GAAP;EACD,CAxZS;EA0ZVjD,GAAG,EAAE,GA1ZK;EA2ZVkD,SAAS,EAAE,GA3ZD;EA4ZVC,KAAK,EAAE,IA5ZG;EA6ZV5C,KAAK,EAAE;AA7ZG,CAAZ;AAgaAA,KAAK,CAACA,KAAN,GAAcA,KAAd;AAEA6C,MAAM,CAACC,OAAP,GAAiB9C,KAAjB"},"metadata":{},"sourceType":"script"}